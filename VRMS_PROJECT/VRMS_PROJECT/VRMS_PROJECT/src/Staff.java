/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import database_connector.DBKonek;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import java.sql.SQLException;
import javax.swing.JOptionPane;
/**
 *
 * @author User
 */
public class Staff extends javax.swing.JFrame {
    private Connection kon;

    /**
     *
     */
    public Staff() {
        initComponents();
        DBKonek dbc = new DBKonek();
        kon = dbc.getConnection();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        dashboard = new javax.swing.JButton();
        customermngmnt = new javax.swing.JButton();
        usagemonitor = new javax.swing.JButton();
        equipmngmnt = new javax.swing.JButton();
        reports = new javax.swing.JButton();
        logoutstaff = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        machine1bttn = new javax.swing.JButton();
        machine2bttn = new javax.swing.JButton();
        machine3bttn = new javax.swing.JButton();
        machine4bttn = new javax.swing.JButton();
        machine5bttn = new javax.swing.JButton();
        machine6bttn = new javax.swing.JButton();
        info = new java.awt.TextArea();
        rent = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cusname = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        connum = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        adds = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        bookingmngmnt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/IconAdmin.png"))); // NOI18N
        jLabel2.setText("STAFF");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, -1, -1));

        dashboard.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        dashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/dashicon.png"))); // NOI18N
        dashboard.setText("Dashboard");
        dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardActionPerformed(evt);
            }
        });
        jPanel1.add(dashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 210, 40));

        customermngmnt.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        customermngmnt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/customermngmnt.png"))); // NOI18N
        customermngmnt.setText("Customer Management");
        customermngmnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customermngmntActionPerformed(evt);
            }
        });
        jPanel1.add(customermngmnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 210, 40));

        usagemonitor.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        usagemonitor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/usagemonitor.png"))); // NOI18N
        usagemonitor.setText("Usage Monitoring");
        usagemonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usagemonitorActionPerformed(evt);
            }
        });
        jPanel1.add(usagemonitor, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 210, 40));

        equipmngmnt.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        equipmngmnt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/equipmngmnt.png"))); // NOI18N
        equipmngmnt.setText("Equipment Management");
        equipmngmnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipmngmntActionPerformed(evt);
            }
        });
        jPanel1.add(equipmngmnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 210, 40));

        reports.setFont(new java.awt.Font("Monospaced", 1, 15)); // NOI18N
        reports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/reportssss.png"))); // NOI18N
        reports.setText("Reports");
        reports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsActionPerformed(evt);
            }
        });
        jPanel1.add(reports, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 210, 40));

        logoutstaff.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        logoutstaff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/logouticon.png"))); // NOI18N
        logoutstaff.setText("Log out");
        logoutstaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutstaffActionPerformed(evt);
            }
        });
        jPanel1.add(logoutstaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 510, 120, 30));

        jTabbedPane1.setBackground(new java.awt.Color(204, 255, 204));

        jPanel9.setBackground(new java.awt.Color(204, 255, 255));
        jPanel9.setPreferredSize(new java.awt.Dimension(740, 490));
        jPanel9.setRequestFocusEnabled(false);
        jPanel9.setVerifyInputWhenFocusTarget(false);

        machine1bttn.setBackground(new java.awt.Color(102, 204, 255));
        machine1bttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/machine1.png"))); // NOI18N
        machine1bttn.setBorder(new javax.swing.border.MatteBorder(null));
        machine1bttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machine1bttnActionPerformed(evt);
            }
        });

        machine2bttn.setBackground(new java.awt.Color(102, 204, 255));
        machine2bttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/machine2.png"))); // NOI18N
        machine2bttn.setBorder(new javax.swing.border.MatteBorder(null));
        machine2bttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machine2bttnActionPerformed(evt);
            }
        });

        machine3bttn.setBackground(new java.awt.Color(102, 204, 255));
        machine3bttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/machine3.png"))); // NOI18N
        machine3bttn.setBorder(new javax.swing.border.MatteBorder(null));
        machine3bttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machine3bttnActionPerformed(evt);
            }
        });

        machine4bttn.setBackground(new java.awt.Color(102, 204, 255));
        machine4bttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/machine4.png"))); // NOI18N
        machine4bttn.setBorder(new javax.swing.border.MatteBorder(null));
        machine4bttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machine4bttnActionPerformed(evt);
            }
        });

        machine5bttn.setBackground(new java.awt.Color(102, 204, 255));
        machine5bttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/machinee5.png"))); // NOI18N
        machine5bttn.setBorder(new javax.swing.border.MatteBorder(null));
        machine5bttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machine5bttnActionPerformed(evt);
            }
        });

        machine6bttn.setBackground(new java.awt.Color(102, 204, 255));
        machine6bttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/machine6.png"))); // NOI18N
        machine6bttn.setBorder(new javax.swing.border.MatteBorder(null));
        machine6bttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machine6bttnActionPerformed(evt);
            }
        });

        info.setBackground(new java.awt.Color(220, 230, 250));
        info.setEditable(false);
        info.setForeground(new java.awt.Color(0, 0, 100));

        rent.setBackground(new java.awt.Color(0, 204, 0));
        rent.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        rent.setText("RENT");
        rent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel3.setText("Machine 1");

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel4.setText("Machine 2");

        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel5.setText("Machine 6");

        jLabel6.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel6.setText("Machine 3");

        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel7.setText("Machine 4");

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel8.setText("Machine 5");

        jLabel9.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jLabel9.setText("Customer Name:");

        jLabel10.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jLabel10.setText("Contact Number:");

        cusname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusnameActionPerformed(evt);
            }
        });

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jLabel11.setText("Email:");

        connum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connumActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jLabel12.setText("Address:");

        adds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(machine1bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(machine3bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))))
                .addGap(35, 35, 35)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(machine2bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(machine4bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 18, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cusname)
                                    .addComponent(adds, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                    .addComponent(email)))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connum, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel8)
                        .addGap(97, 97, 97)
                        .addComponent(jLabel5))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(machine5bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(machine6bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(rent, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(0, 306, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adds, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(rent, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(machine1bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)
                                .addGap(3, 3, 3)
                                .addComponent(machine3bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel6)
                                .addGap(3, 3, 3)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(machine5bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(machine6bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel5)))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(machine2bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel4)
                                        .addGap(3, 3, 3)
                                        .addComponent(machine4bttn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cusname, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(connum, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(4, 4, 4)
                                .addComponent(jLabel7)))
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Booking Management", jPanel9);

        jPanel10.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Dashboard", jPanel10);

        jPanel11.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Customer Management", jPanel11);

        jPanel12.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Usage Monitoring", jPanel12);

        jPanel13.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Equipment  Management", jPanel13);

        jPanel14.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Reports", jPanel14);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, 740, 530));

        bookingmngmnt.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        bookingmngmnt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/bookingggicon.png"))); // NOI18N
        bookingmngmnt.setText("Booking Management");
        bookingmngmnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingmngmntActionPerformed(evt);
            }
        });
        jPanel1.add(bookingmngmnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 210, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/guiadmindashh.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_dashboardActionPerformed

    private void customermngmntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customermngmntActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_customermngmntActionPerformed

    private void equipmngmntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipmngmntActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_equipmngmntActionPerformed

    private void usagemonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usagemonitorActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(3);
    }//GEN-LAST:event_usagemonitorActionPerformed

    private void reportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(5);
    }//GEN-LAST:event_reportsActionPerformed

    private void logoutstaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutstaffActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to logout?",
        "Confirm Logout",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE
    );

    if (choice == JOptionPane.YES_OPTION) {
        Login loginFrame = new Login();  
        loginFrame.setVisible(true);    
        this.dispose();
   }
    }//GEN-LAST:event_logoutstaffActionPerformed

    private void bookingmngmntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingmngmntActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_bookingmngmntActionPerformed

    private void machine1bttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machine1bttnActionPerformed
        // TODO add your handling code here:
       // Connect to the database
    Connection connection = DBKonek.getConnection();

    if (connection == null) {
        JOptionPane.showMessageDialog(null, "Database connection failed.");
        return;
    }

    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT machine_name, status, remarks, price FROM videoke_machines WHERE machine_id = ?";
        pstmt = connection.prepareStatement(sql);
        pstmt.setInt(1, 1); // Fetch data for machine_id = 1

        rs = pstmt.executeQuery();

        if (rs.next()) {
            String machineName = rs.getString("machine_name");
            String status = rs.getString("status");
            String remarks = rs.getString("remarks");
            double price = rs.getDouble("price");

            // Updated info with daily rate and paraphrased note
            String machineInfo = "                                  Basic Package\n"
                               + "--------------------------------------------------------------------------\n"
                               + "Machine Name: " + machineName + "\n"
                               + "Status: " + status + "\n"
                               + "Remarks: " + remarks + "\n"
                               + "Inclusions:\n"
                               + "   -  1 Videoke Unit (Platinum Player)\n"
                               + "   -  2 Wired Microphones\n"
                               + "   -  32-inch TV\n"
                               + "   -  Updated Songs, Quality Sound\n"
                               + "   -  Per Day Rental\n"
                               + " Price: ₱" + String.format("%.2f", price) + " / day\n"
                               + " Reminder: Any damage or loss during the rental period will be the client’s responsibility.";

            info.setText(machineInfo);
        } else {
            info.setText("No data found for Machine ID 1.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        info.setText("Error retrieving machine data.");
    } finally {
        // Close resources
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
       }
    }//GEN-LAST:event_machine1bttnActionPerformed

    private void machine2bttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machine2bttnActionPerformed
        // TODO add your handling code here:
    Connection connection = DBKonek.getConnection();

    if (connection == null) {
        JOptionPane.showMessageDialog(null, "Database connection failed.");
        return;
    }

    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT machine_name, status, remarks, price FROM videoke_machines WHERE machine_id = ?";
        pstmt = connection.prepareStatement(sql);
        pstmt.setInt(1, 2); // Fetch data for machine_id = 2

        rs = pstmt.executeQuery();

        if (rs.next()) {
            String machineName = rs.getString("machine_name");
            String status = rs.getString("status");
            String remarks = rs.getString("remarks");
            double price = rs.getDouble("price");

            // Display machine information with upgraded details
            String machineInfo = "                                  Party Package\n"
                               + "--------------------------------------------------------------------------\n"
                               + "Machine Name: " + machineName + "\n"
                               + "Status: " + status + "\n"
                               + "Remarks: " + remarks + "\n"
                               + "Inclusions:\n"
                               + "   -  1 Videoke Unit (Vol. 99 Platinum Player)\n"
                               + "   -  2 Wireless Microphones + Mic Stand\n"
                               + "   -  32-inch LED TV\n"
                               + "   -  Updated Songs (2024–2025)\n"
                               + "   -  Songbook + Book Stand\n"
                               + "   -  Per Day Rental\n"
                               + "  Price: ₱" + String.format("%.2f", price) + " / day\n"
                               + "  Reminder: Any damage or loss during the rental period will be the client’s responsibility.";

            info.setText(machineInfo);
        } else {
            info.setText("No data found for Machine ID 2.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        info.setText("Error retrieving machine data.");
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_machine2bttnActionPerformed

    private void machine3bttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machine3bttnActionPerformed
        // TODO add your handling code here:
       Connection connection = DBKonek.getConnection();

    if (connection == null) {
        JOptionPane.showMessageDialog(null, "Database connection failed.");
        return;
    }

    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT machine_name, status, remarks, price FROM videoke_machines WHERE machine_id = ?";
        pstmt = connection.prepareStatement(sql);
        pstmt.setInt(1, 3); // Fetch data for machine_id = 2

        rs = pstmt.executeQuery();

        if (rs.next()) {
            String machineName = rs.getString("machine_name");
            String status = rs.getString("status");
            String remarks = rs.getString("remarks");
            double price = rs.getDouble("price");

            // Display machine information with upgraded details
            String machineInfo = "                                  Premium Package\n"
                               + "--------------------------------------------------------------------------\n"
                               + "Machine Name: " + machineName + "\n"
                               + "Status: " + status + "\n"
                               + "Remarks: " + remarks + "\n"
                               + "Inclusions:\n"
                               + "  -   1 High-End Videoke Unit (Platinum Karaoke)\n"
                               + "  -   2 Wired Microphones\n"
                               + "  -   32-inch Smart TV\n"
                               + "  -    Premium Sound System, Extensive Song Library\n"
                               + "  -    Per Day Rental\n"
                               + "  Price: ₱" + String.format("%.2f", price) + " / day\n"
                               + "  Reminder: Any damage or loss during the rental period will be the client’s responsibility.";

            info.setText(machineInfo);
        } else {
            info.setText("No data found for Machine ID 3.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        info.setText("Error retrieving machine data.");
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
   }
    }//GEN-LAST:event_machine3bttnActionPerformed

    private void machine4bttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machine4bttnActionPerformed
        // TODO add your handling code here:
        Connection connection = DBKonek.getConnection();

    if (connection == null) {
        JOptionPane.showMessageDialog(null, "Database connection failed.");
        return;
    }

    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT machine_name, status, remarks, price FROM videoke_machines WHERE machine_id = ?";
        pstmt = connection.prepareStatement(sql);
        pstmt.setInt(1, 4); // Fetch data for machine_id = 4

        rs = pstmt.executeQuery();

        if (rs.next()) {
            String machineName = rs.getString("machine_name");
            String status = rs.getString("status");
            String remarks = rs.getString("remarks");
            double price = rs.getDouble("price");

            // Updated info based on the image - Party Package
            String machineInfo = "                                  Premium Package\n"
                                 + "--------------------------------------------------------------------------\n"
                                 + "Machine Name: " + machineName + "\n"
                                 + "Status: " + status + "\n"
                                 + "Remarks: " + remarks + "\n"
                                 + "Inclusions:\n"
                                 + "     -  1 Platinum Videoke Player\n"
                                 + "     -  2 Wireless Microphones\n"
                                 + "     -  Large LED TV\n"
                                 + "     -  Portable Speaker with Colorful LED Lights\n"
                                 + "     -  Updated Song Collection\n"
                                 + "     -  Per Day Rental\n"
                                 + " Price: ₱" + String.format("%.2f", price) + " / day\n"
                                 + " Reminder: Any damage or loss during the rental period will be the client’s responsibility.";

            info.setText(machineInfo);
        } else {
            info.setText("No data found for Machine ID 4.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        info.setText("Error retrieving machine data.");
    } finally {
        // Close resources
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
     }
    }//GEN-LAST:event_machine4bttnActionPerformed

    private void machine5bttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machine5bttnActionPerformed
        // TODO add your handling code here:
        Connection connection = DBKonek.getConnection();

    if (connection == null) {
        JOptionPane.showMessageDialog(null, "Database connection failed.");
        return;
    }

    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT machine_name, status, remarks, price FROM videoke_machines WHERE machine_id = ?";
        pstmt = connection.prepareStatement(sql);
        pstmt.setInt(1, 5); // Fetch data for machine_id = 5

        rs = pstmt.executeQuery();

        if (rs.next()) {
            String machineName = rs.getString("machine_name");
            String status = rs.getString("status");
            String remarks = rs.getString("remarks");
            double price = rs.getDouble("price");

            // Updated info based on the image - Standard Package
            String machineInfo = "                                  Premium Package\n"
                                 + "--------------------------------------------------------------------------\n"
                                 + "Machine Name: " + machineName + "\n"
                                 + "Status: " + status + "\n"
                                 + "Remarks: " + remarks + "\n"
                                 + "Inclusions:\n"
                                 + "     -  1 Videoke Player Unit\n"
                                 + "     -  2 Wired Microphones (as seen in the image)\n"
                                 + "     -  TV Display on a Stand\n"
                                 + "     -  Speaker on a Tripod Stand\n"
                                 + "     -  Basic Song Library\n"
                                 + "     -  Per Day Rental\n"
                                 + " Price: ₱" + String.format("%.2f", price) + " / day\n"
                                 + " Reminder: Any damage or loss during the rental period will be the client’s responsibility.";

            info.setText(machineInfo);
        } else {
            info.setText("No data found for Machine ID 5.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        info.setText("Error retrieving machine data.");
    } finally {
        // Close resources
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_machine5bttnActionPerformed

    private void machine6bttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machine6bttnActionPerformed
        // TODO add your handling code here:
        Connection connection = DBKonek.getConnection();

    if (connection == null) {
        JOptionPane.showMessageDialog(null, "Database connection failed.");
        return;
    }

    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT machine_name, status, remarks, price FROM videoke_machines WHERE machine_id = ?";
        pstmt = connection.prepareStatement(sql);
        pstmt.setInt(1, 6); // Fetch data for machine_id = 6

        rs = pstmt.executeQuery();

        if (rs.next()) {
            String machineName = rs.getString("machine_name");
            String status = rs.getString("status");
            String remarks = rs.getString("remarks");
            double price = rs.getDouble("price");

            // Updated info based on the image - Integrated Karaoke System
            String machineInfo = "                                  Basic Package\n"
                                 + "--------------------------------------------------------------------------\n"
                                 + "Machine Name: " + machineName + "\n"
                                 + "Status: " + status + "\n"
                                 + "Remarks: " + remarks + "\n"
                                 + "Inclusions:\n"
                                 + "     -  1 All-in-One Karaoke Machine (Integrated Screen, Player, Speakers)\n"
                                 + "     -  Built-in Song Selection Interface\n"
                                 + "     -  Integrated Speakers with Good Audio Quality\n"
                                 + "     -  Microphone Ports (microphones not always built-in, check actual unit)\n"
                                 + "     -  Extensive Built-in Song Library\n"
                                 + "     -  Per Day Rental\n"
                                 + " Price: ₱" + String.format("%.2f", price) + " / day\n"
                                 + " Note: Any damage or loss during the rental period will be the client’s responsibility.";

            info.setText(machineInfo);
        } else {
            info.setText("No data found for Machine ID 6.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        info.setText("Error retrieving machine data.");
    } finally {
        // Close resources
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_machine6bttnActionPerformed

    private void rentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentActionPerformed
        // TODO add your handling code here:
       // Gather customer details
        String customerName = cusname.getText().trim();
        String contactNumber = connum.getText().trim();
        String emailAddress = email.getText().trim();
        String address = adds.getText().trim();
        String machineInfoText = info.getText().trim();

        // Validate input
        if (customerName.isEmpty() || contactNumber.isEmpty() || emailAddress.isEmpty() || address.isEmpty() || machineInfoText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields are required! Please select a machine and fill in all details.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Extract machine name from info text
        String machineName = "";
        String[] lines = machineInfoText.split("\n");
        for (String line : lines) {
            if (line.startsWith("Machine Name: ")) {
                machineName = line.substring("Machine Name: ".length()).trim();
                break;
            }
        }

        if (machineName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid machine information! Please select a machine.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Show confirmation dialog
        String customerDetails = "Customer Name: " + customerName + "\n" +
                                "Contact Number: " + contactNumber + "\n" +
                                "Email: " + emailAddress + "\n" +
                                "Address: " + address + "\n" +
                                "Machine: " + machineName;

        int confirm = JOptionPane.showConfirmDialog(
            null,
            customerDetails,
            "Confirm Rental Details",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return; // Cancelled
        }
        int additionalCost = 0;
        String additionalDetails = "";

// Ask if they want to add extras
        int addExtra = JOptionPane.showConfirmDialog(
        null,
        "Do you want to add additional items like (Speaker or Disco Light)?",
        "Add Extras",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE
    );

    if (addExtra == JOptionPane.YES_OPTION) {
        // Choose type of additional item
        Object[] options = {"Speaker (+₱100 each)", "Disco Light (+₱60 each)"};
        int choice = JOptionPane.showOptionDialog(
            null,
            "Choose additional item to add:",
            "Select Extra Item",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            options,
            options[0]
        );

    if (choice == 0 || choice == 1) {
        String itemType = (choice == 0) ? "Speaker" : "Disco Light";
        int pricePerItem = (choice == 0) ? 100 : 60;

        // Ask how many items
        String input = JOptionPane.showInputDialog(
            null,
            "How many " + itemType + "(s) would you like to add?",
            "Quantity",
            JOptionPane.QUESTION_MESSAGE
        );

        if (input != null) {
            try {
                int quantity = Integer.parseInt(input.trim());
                if (quantity < 0) throw new NumberFormatException();

                additionalCost = quantity * pricePerItem;
                additionalDetails = itemType + " x" + quantity + " = ₱" + additionalCost;

                // Confirm additional item
                int confirmAdd = JOptionPane.showConfirmDialog(
                    null,
                    "Add the following to your rental?\n" + additionalDetails,
                    "Confirm Additional Item",
                    JOptionPane.YES_NO_OPTION
                );

                if (confirmAdd != JOptionPane.YES_OPTION) {
                    additionalCost = 0;
                    additionalDetails = "";
                }
                            String startDateStr = JOptionPane.showInputDialog(
                null,
                "Enter rental start date (YYYY-MM-DD):",
                "Rental Start Date",
                JOptionPane.QUESTION_MESSAGE
            );

            if (startDateStr == null || startDateStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Rental start date is required!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String endDateStr = JOptionPane.showInputDialog(
                null,
                "Enter rental end date (YYYY-MM-DD):",
                "Rental End Date",
                JOptionPane.QUESTION_MESSAGE
            );

            if (endDateStr == null || endDateStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Rental end date is required!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate dates
            java.sql.Date rentalStartDate, rentalEndDate;
            try {
                rentalStartDate = java.sql.Date.valueOf(startDateStr.trim());
                rentalEndDate = java.sql.Date.valueOf(endDateStr.trim());

                if (rentalEndDate.before(rentalStartDate)) {
                    JOptionPane.showMessageDialog(null, "End date cannot be before start date!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(null, "Invalid date format! Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(null, "Invalid quantity entered!", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    } else {
                        return; // Cancelled input
                    }
                }

                    // Database insertion
                    try (PreparedStatement fetchStmt = kon.prepareStatement(
                            "SELECT machine_id, status FROM videoke_machines WHERE machine_name = ?")) {
                        fetchStmt.setString(1, machineName);
                        try (ResultSet rs = fetchStmt.executeQuery()) {
                            if (!rs.next()) {
                                JOptionPane.showMessageDialog(null, "Machine '" + machineName + "' not found in database!", "Error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }

                            int machineId = rs.getInt("machine_id");
                            String status = rs.getString("status");

                            // Check if machine is available
                            if (!"Available".equalsIgnoreCase(status)) {
                                JOptionPane.showMessageDialog(null, "Selected machine is not available for rent!", "Error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }

                // Insert into customers table
                try (PreparedStatement insertStmt = kon.prepareStatement(
                        "INSERT INTO customers (customer_name, contact_number, email, address, machine_id, created_at) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)")) {
                    insertStmt.setString(1, customerName);
                    insertStmt.setString(2, contactNumber); // Convert to int as per table schema
                    insertStmt.setString(3, emailAddress);
                    insertStmt.setString(4, address);
                    insertStmt.setInt(5, machineId);

                    int rowsAffected = insertStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        // Update machine status to "Rented"
                        try (PreparedStatement updateStmt = kon.prepareStatement(
                                "UPDATE videoke_machines SET status = 'Rented' WHERE machine_id = ?")) {
                            updateStmt.setInt(1, machineId);
                            updateStmt.executeUpdate();
                        }
                        try (PreparedStatement logStmt = kon.prepareStatement(
                        "INSERT INTO rental_logs (customer_name, contact_number, email, address, machine_id, machine_name, rental_date, additional_item, rental_start_date, rental_end_date) " +
                        "VALUES (?, ?, ?, ?, ?, ?, CURRENT_DATE, ?, ?, ?)")) {

                        logStmt.setString(1, customerName);
                        logStmt.setString(2, contactNumber);
                        logStmt.setString(3, emailAddress);
                        logStmt.setString(4, address);
                        logStmt.setInt(5, machineId);
                        logStmt.setString(6, machineName);
                        logStmt.setString(7, additionalDetails); // could be empty string if no extras
                            Date rentalStartDate = null;
                        logStmt.setDate(8, rentalStartDate);
                            Date rentalEndDate = null;
                        logStmt.setDate(9, rentalEndDate);

                        logStmt.executeUpdate();
                    }
                        
                        try (PreparedStatement logStmt = kon.prepareStatement(
                                    "INSERT INTO rental_logs (customer_name, contact_number, email, address, machine_id, machine_name, additional_item) VALUES (?, ?, ?, ?, ?, ?, ?)")) {
                             logStmt.setString(1, customerName);
                             logStmt.setString(2, contactNumber);
                             logStmt.setString(3, emailAddress);
                             logStmt.setString(4, address);
                             logStmt.setInt(5, machineId);
                             logStmt.setString(6, machineName);
                             logStmt.setString(7, additionalDetails); // may be empty string ("") kung walang extras

                             logStmt.executeUpdate();
                            }

                        JOptionPane.showMessageDialog(null, "Customer rental added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        // Clear the form
                        cusname.setText("");
                        connum.setText("");
                        email.setText("");
                        adds.setText("");
                        info.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to add customer!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Contact number must be a valid number!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
   }
    }//GEN-LAST:event_rentActionPerformed

    private void cusnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cusnameActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void connumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_connumActionPerformed

    private void addsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatMacLightLaf.setup();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Staff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField adds;
    private javax.swing.JButton bookingmngmnt;
    private javax.swing.JTextField connum;
    private javax.swing.JTextField cusname;
    private javax.swing.JButton customermngmnt;
    private javax.swing.JButton dashboard;
    private javax.swing.JTextField email;
    private javax.swing.JButton equipmngmnt;
    private java.awt.TextArea info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logoutstaff;
    private javax.swing.JButton machine1bttn;
    private javax.swing.JButton machine2bttn;
    private javax.swing.JButton machine3bttn;
    private javax.swing.JButton machine4bttn;
    private javax.swing.JButton machine5bttn;
    private javax.swing.JButton machine6bttn;
    private javax.swing.JButton rent;
    private javax.swing.JButton reports;
    private javax.swing.JButton usagemonitor;
    // End of variables declaration//GEN-END:variables
}
